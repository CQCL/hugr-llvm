---
source: tests/guppy.rs
info:
  program: hugr-llvm
  args:
    - "-"
---
success: true
exit_code: 0
----- stdout -----
; ModuleID = 'module'
source_filename = "module"

define i32 @_hl.rus.35(i32 %0, i64 %1) {
alloca_block:
  %2 = extractvalue { {} } undef, 0
  br label %cond_exit_43

3:                                                ; preds = %cond_exit_43
  %4 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 1
  br label %56

5:                                                ; preds = %cond_exit_43
  %6 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 2
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %qalloc_call = call i32 @___qalloc()
  %h_call = call i32 @___h(i32 %qalloc_call)
  %qalloc_call35 = call i32 @___qalloc.1()
  %h_call37 = call i32 @___h.2(i32 %qalloc_call35)
  %9 = insertvalue { i32, i32 } undef, i32 %h_call37, 0
  %10 = insertvalue { i32, i32 } %9, i32 %h_call, 1
  %11 = insertvalue { { i32, i32 } } poison, { i32, i32 } %10, 0
  %12 = extractvalue { { i32, i32 } } %11, 0
  %13 = extractvalue { i32, i32 } %12, 0
  %14 = extractvalue { i32, i32 } %12, 1
  %tdg_call = call i32 @___tdg(i32 %13)
  %rz_call = call { i32, i32 } @___cx(i32 %14, i32 %tdg_call)
  %15 = extractvalue { i32, i32 } %rz_call, 0
  %16 = extractvalue { i32, i32 } %rz_call, 1
  %17 = insertvalue { i32, i32 } undef, i32 %15, 0
  %18 = insertvalue { i32, i32 } %17, i32 %16, 1
  %19 = insertvalue { { i32, i32 } } poison, { i32, i32 } %18, 0
  %20 = extractvalue { { i32, i32 } } %19, 0
  %21 = extractvalue { i32, i32 } %20, 0
  %22 = extractvalue { i32, i32 } %20, 1
  %t_call = call i32 @___t(i32 %22)
  %measure_call = call { i32, { i32, {}, {} } } @___measure(i32 %t_call)
  %23 = extractvalue { i32, { i32, {}, {} } } %measure_call, 0
  %24 = extractvalue { i32, { i32, {}, {} } } %measure_call, 1
  call void @___qfree(i32 %23)
  %25 = extractvalue { i32, {}, {} } %24, 0
  %cond129 = icmp eq i32 %25, 1
  br i1 %cond129, label %cond_exit_73, label %35

cond_exit_43:                                     ; preds = %58, %35, %alloca_block
  %"7_2.0" = phi i32 [ %0, %alloca_block ], [ %"7_2.0", %35 ], [ %x_call, %58 ]
  %"7_1.0" = phi i64 [ %1, %alloca_block ], [ %8, %35 ], [ %61, %58 ]
  %"7_0.0" = phi i64 [ 0, %alloca_block ], [ %7, %35 ], [ %62, %58 ]
  %26 = icmp slt i64 %"7_0.0", %"7_1.0"
  %27 = select i1 %26, { i32, {}, {} } { i32 1, {} poison, {} undef }, { i32, {}, {} } { i32 0, {} undef, {} poison }
  %28 = extractvalue { i32, {}, {} } %27, 0
  %29 = extractvalue { i32, {}, {} } %27, 1
  %30 = extractvalue { i32, {}, {} } %27, 2
  %cond = icmp eq i32 %28, 1
  %31 = insertvalue { i64, i64 } undef, i64 %"7_0.0", 0
  %32 = insertvalue { i64, i64 } %31, i64 %"7_1.0", 1
  %33 = insertvalue { i32, {}, { i64, i64 } } { i32 1, {} poison, { i64, i64 } poison }, { i64, i64 } %32, 2
  %"021.0" = select i1 %cond, { i32, {}, { i64, i64 } } %33, { i32, {}, { i64, i64 } } { i32 0, {} undef, { i64, i64 } poison }
  %34 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 0
  %cond128 = icmp eq i32 %34, 1
  br i1 %cond128, label %5, label %3

35:                                               ; preds = %5
  %36 = extractvalue { i32, {}, {} } %24, 1
  call void @___qfree.8(i32 %21)
  %37 = extractvalue { {} } undef, 0
  br label %cond_exit_43

cond_exit_73:                                     ; preds = %5
  %38 = extractvalue { i32, {}, {} } %24, 2
  %t_call70 = call i32 @___t.3(i32 %"7_2.0")
  %z_call = call i32 @___z(i32 %t_call70)
  %rz_call74 = call { i32, i32 } @___cx.4(i32 %z_call, i32 %21)
  %39 = extractvalue { i32, i32 } %rz_call74, 0
  %40 = extractvalue { i32, i32 } %rz_call74, 1
  %41 = insertvalue { i32, i32 } undef, i32 %39, 0
  %42 = insertvalue { i32, i32 } %41, i32 %40, 1
  %43 = insertvalue { { i32, i32 } } poison, { i32, i32 } %42, 0
  %44 = extractvalue { { i32, i32 } } %43, 0
  %45 = extractvalue { i32, i32 } %44, 0
  %46 = extractvalue { i32, i32 } %44, 1
  %t_call79 = call i32 @___t.5(i32 %46)
  %measure_call81 = call { i32, { i32, {}, {} } } @___measure.6(i32 %t_call79)
  %47 = extractvalue { i32, { i32, {}, {} } } %measure_call81, 0
  %48 = extractvalue { i32, { i32, {}, {} } } %measure_call81, 1
  %49 = extractvalue { i32, {}, {} } %48, 0
  %50 = extractvalue { i32, {}, {} } %48, 1
  %51 = extractvalue { i32, {}, {} } %48, 2
  %cond130 = icmp eq i32 %49, 1
  %52 = insertvalue { i64, i64 } undef, i64 %7, 0
  %53 = insertvalue { i64, i64 } %52, i64 %8, 1
  %54 = insertvalue { i32, { i64, i64 }, {} } { i32 0, { i64, i64 } poison, {} poison }, { i64, i64 } %53, 1
  %"083.0" = select i1 %cond130, { i32, { i64, i64 }, {} } { i32 1, { i64, i64 } poison, {} undef }, { i32, { i64, i64 }, {} } %54
  call void @___qfree.7(i32 %47)
  %55 = extractvalue { i32, { i64, i64 }, {} } %"083.0", 0
  %cond131 = icmp eq i32 %55, 1
  br i1 %cond131, label %64, label %58

56:                                               ; preds = %64, %3
  %"11_0.0" = phi i32 [ %"7_2.0", %3 ], [ %45, %64 ]
  %57 = extractvalue { {} } undef, 0
  ret i32 %"11_0.0"

58:                                               ; preds = %cond_exit_73
  %59 = extractvalue { i32, { i64, i64 }, {} } %"083.0", 1
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %59, 1
  %x_call = call i32 @___x(i32 %45)
  %62 = add i64 %60, 1
  %63 = extractvalue { {} } undef, 0
  br label %cond_exit_43

64:                                               ; preds = %cond_exit_73
  %65 = extractvalue { i32, { i64, i64 }, {} } %"083.0", 2
  %66 = extractvalue { {} } undef, 0
  br label %56
}

declare i32 @___qalloc()

declare i32 @___h(i32)

declare i32 @___qalloc.1()

declare i32 @___h.2(i32)

declare i32 @___tdg(i32)

declare { i32, i32 } @___cx(i32, i32)

declare i32 @___t(i32)

declare { i32, { i32, {}, {} } } @___measure(i32)

declare void @___qfree(i32)

declare i32 @___t.3(i32)

declare i32 @___z(i32)

declare { i32, i32 } @___cx.4(i32, i32)

declare i32 @___t.5(i32)

declare { i32, { i32, {}, {} } } @___measure.6(i32)

declare void @___qfree.7(i32)

declare void @___qfree.8(i32)

declare i32 @___x(i32)

define { i32, {}, {} } @_hl.main.36() {
alloca_block:
  %qalloc_call = call i32 @___qalloc.9()
  %0 = call i32 @_hl.rus.35(i32 %qalloc_call, i64 100)
  %measure_call = call { i32, { i32, {}, {} } } @___measure.10(i32 %0)
  %1 = extractvalue { i32, { i32, {}, {} } } %measure_call, 0
  %2 = extractvalue { i32, { i32, {}, {} } } %measure_call, 1
  call void @___qfree.11(i32 %1)
  %3 = extractvalue { {} } undef, 0
  ret { i32, {}, {} } %2
}

declare i32 @___qalloc.9()

declare { i32, { i32, {}, {} } } @___measure.10(i32)

declare void @___qfree.11(i32)


----- stderr -----
HUGR valid!
