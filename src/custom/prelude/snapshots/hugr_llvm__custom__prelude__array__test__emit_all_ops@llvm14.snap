---
source: src/custom/prelude/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = insertvalue [2 x i64] undef, i64 1, 0
  %1 = insertvalue [2 x i64] %0, i64 2, 1
  %2 = alloca i64, i32 2, align 8
  %3 = bitcast i64* %2 to [2 x i64]*
  store [2 x i64] %1, [2 x i64]* %3, align 4
  %4 = getelementptr i64, i64* %2, i64 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %2, i64 1
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %4, align 4
  store i64 %5, i64* %6, align 4
  %8 = bitcast i64* %2 to [2 x i64]*
  %9 = load [2 x i64], [2 x i64]* %8, align 4
  %10 = insertvalue { [2 x i64] } undef, [2 x i64] %9, 0
  %11 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 1, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %10, 2
  %12 = insertvalue { [2 x i64] } undef, [2 x i64] %1, 0
  %13 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 0, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %12, 1
  %14 = icmp ult i64 0, 2
  %15 = icmp ult i64 1, 2
  %16 = and i1 %14, %15
  %17 = select i1 %16, { i32, { [2 x i64] }, { [2 x i64] } } %11, { i32, { [2 x i64] }, { [2 x i64] } } %13
  %18 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 0
  switch i32 %18, label %19 [
    i32 1, label %22
  ]

19:                                               ; preds = %entry_block
  %20 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 1
  %21 = extractvalue { [2 x i64] } %20, 0
  br label %cond_16_case_0

22:                                               ; preds = %entry_block
  %23 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 2
  %24 = extractvalue { [2 x i64] } %23, 0
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %25 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %26 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %22
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"0.0" = phi [2 x i64] [ zeroinitializer, %cond_16_case_0 ], [ %24, %cond_16_case_1 ]
  %28 = alloca i64, i32 2, align 8
  %29 = bitcast i64* %28 to [2 x i64]*
  store [2 x i64] %"0.0", [2 x i64]* %29, align 4
  %30 = getelementptr i64, i64* %28, i64 0
  %31 = load i64, i64* %30, align 4
  %32 = insertvalue { i64 } undef, i64 %31, 0
  %33 = insertvalue { i32, {}, { i64 } } { i32 1, {} poison, { i64 } poison }, { i64 } %32, 2
  %34 = icmp ult i64 0, 2
  %35 = select i1 %34, { i32, {}, { i64 } } %33, { i32, {}, { i64 } } { i32 0, {} undef, { i64 } poison }
  %36 = extractvalue { i32, {}, { i64 } } %35, 0
  switch i32 %36, label %37 [
    i32 1, label %39
  ]

37:                                               ; preds = %cond_exit_16
  %38 = extractvalue { i32, {}, { i64 } } %35, 1
  br label %cond_28_case_0

39:                                               ; preds = %cond_exit_16
  %40 = extractvalue { i32, {}, { i64 } } %35, 2
  %41 = extractvalue { i64 } %40, 0
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %37
  %42 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %43 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %42, i8* %43)
  call void @abort()
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %39
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"019.0" = phi i64 [ 0, %cond_28_case_0 ], [ %41, %cond_28_case_1 ]
  %45 = alloca i64, i32 2, align 8
  %46 = bitcast i64* %45 to [2 x i64]*
  store [2 x i64] %"0.0", [2 x i64]* %46, align 4
  %47 = getelementptr i64, i64* %45, i64 1
  %48 = load i64, i64* %47, align 4
  store i64 %"019.0", i64* %47, align 4
  %49 = bitcast i64* %45 to [2 x i64]*
  %50 = load [2 x i64], [2 x i64]* %49, align 4
  %51 = insertvalue { i64, [2 x i64] } undef, i64 %48, 0
  %52 = insertvalue { i64, [2 x i64] } %51, [2 x i64] %50, 1
  %53 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 1, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %52, 2
  %54 = insertvalue { i64, [2 x i64] } undef, i64 %"019.0", 0
  %55 = insertvalue { i64, [2 x i64] } %54, [2 x i64] %"0.0", 1
  %56 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 0, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %55, 1
  %57 = icmp ult i64 1, 2
  %58 = select i1 %57, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %53, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %56
  %59 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58, 0
  switch i32 %59, label %60 [
    i32 1, label %64
  ]

60:                                               ; preds = %cond_exit_28
  %61 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58, 1
  %62 = extractvalue { i64, [2 x i64] } %61, 0
  %63 = extractvalue { i64, [2 x i64] } %61, 1
  br label %cond_40_case_0

64:                                               ; preds = %cond_exit_28
  %65 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58, 2
  %66 = extractvalue { i64, [2 x i64] } %65, 0
  %67 = extractvalue { i64, [2 x i64] } %65, 1
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %60
  %68 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 0
  %69 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 1
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %68, i8* %69)
  call void @abort()
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %64
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"030.0" = phi i64 [ 0, %cond_40_case_0 ], [ %66, %cond_40_case_1 ]
  %"1.0" = phi [2 x i64] [ zeroinitializer, %cond_40_case_0 ], [ %67, %cond_40_case_1 ]
  %71 = alloca i64, i32 2, align 8
  %72 = bitcast i64* %71 to [2 x i64]*
  store [2 x i64] %"1.0", [2 x i64]* %72, align 4
  %73 = getelementptr i64, i64* %71, i32 1
  %74 = load i64, i64* %71, align 4
  %75 = bitcast i64* %73 to [1 x i64]*
  %76 = load [1 x i64], [1 x i64]* %75, align 4
  %77 = insertvalue { i64, [1 x i64] } undef, i64 %74, 0
  %78 = insertvalue { i64, [1 x i64] } %77, [1 x i64] %76, 1
  %79 = insertvalue { i32, {}, { i64, [1 x i64] } } { i32 1, {} poison, { i64, [1 x i64] } poison }, { i64, [1 x i64] } %78, 2
  %80 = extractvalue { i32, {}, { i64, [1 x i64] } } %79, 0
  switch i32 %80, label %81 [
    i32 1, label %83
  ]

81:                                               ; preds = %cond_exit_40
  %82 = extractvalue { i32, {}, { i64, [1 x i64] } } %79, 1
  br label %cond_51_case_0

83:                                               ; preds = %cond_exit_40
  %84 = extractvalue { i32, {}, { i64, [1 x i64] } } %79, 2
  %85 = extractvalue { i64, [1 x i64] } %84, 0
  %86 = extractvalue { i64, [1 x i64] } %84, 1
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %81
  %87 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 0
  %88 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 1
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %87, i8* %88)
  call void @abort()
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %83
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"050.0" = phi i64 [ 0, %cond_51_case_0 ], [ %85, %cond_51_case_1 ]
  %"151.0" = phi [1 x i64] [ zeroinitializer, %cond_51_case_0 ], [ %86, %cond_51_case_1 ]
  %90 = alloca i64, align 8
  %91 = bitcast i64* %90 to [1 x i64]*
  store [1 x i64] %"151.0", [1 x i64]* %91, align 4
  %92 = getelementptr i64, i64* %90, i32 0
  %93 = load i64, i64* %92, align 4
  %94 = bitcast i64* %90 to [0 x i64]*
  %95 = load [0 x i64], [0 x i64]* %94, align 4
  %96 = insertvalue { i64, [0 x i64] } undef, i64 %93, 0
  %97 = insertvalue { i64, [0 x i64] } %96, [0 x i64] %95, 1
  %98 = insertvalue { i32, {}, { i64, [0 x i64] } } { i32 1, {} poison, { i64, [0 x i64] } poison }, { i64, [0 x i64] } %97, 2
  %99 = extractvalue { i32, {}, { i64, [0 x i64] } } %98, 0
  switch i32 %99, label %100 [
    i32 1, label %102
  ]

100:                                              ; preds = %cond_exit_51
  %101 = extractvalue { i32, {}, { i64, [0 x i64] } } %98, 1
  br label %cond_62_case_0

102:                                              ; preds = %cond_exit_51
  %103 = extractvalue { i32, {}, { i64, [0 x i64] } } %98, 2
  %104 = extractvalue { i64, [0 x i64] } %103, 0
  %105 = extractvalue { i64, [0 x i64] } %103, 1
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %100
  %106 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %107 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %106, i8* %107)
  call void @abort()
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %102
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"065.0" = phi i64 [ 0, %cond_62_case_0 ], [ %104, %cond_62_case_1 ]
  %"166.0" = phi [0 x i64] [ zeroinitializer, %cond_62_case_0 ], [ %105, %cond_62_case_1 ]
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
