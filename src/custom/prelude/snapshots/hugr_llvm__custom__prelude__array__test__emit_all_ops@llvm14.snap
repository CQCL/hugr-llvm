---
source: src/custom/prelude/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = insertvalue [2 x i64] undef, i64 1, 0
  %1 = insertvalue [2 x i64] %0, i64 2, 1
  %2 = alloca i64, i32 2, align 8
  %3 = bitcast i64* %2 to [2 x i64]*
  store [2 x i64] %1, [2 x i64]* %3, align 4
  %4 = getelementptr i64, i64* %2, i64 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %2, i64 1
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %4, align 4
  store i64 %5, i64* %6, align 4
  %8 = bitcast i64* %2 to [2 x i64]*
  %9 = load [2 x i64], [2 x i64]* %8, align 4
  %10 = insertvalue { [2 x i64] } undef, [2 x i64] %9, 0
  %11 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 1, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %10, 2
  %12 = insertvalue { [2 x i64] } undef, [2 x i64] %1, 0
  %13 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 0, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %12, 1
  %14 = icmp ult i64 0, 2
  %15 = icmp ult i64 1, 2
  %16 = and i1 %14, %15
  %17 = select i1 %16, { i32, { [2 x i64] }, { [2 x i64] } } %11, { i32, { [2 x i64] }, { [2 x i64] } } %13
  %18 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 0
  switch i32 %18, label %19 [
    i32 1, label %22
  ]

19:                                               ; preds = %entry_block
  %20 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 1
  %21 = extractvalue { [2 x i64] } %20, 0
  br label %cond_16_case_0

22:                                               ; preds = %entry_block
  %23 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 2
  %24 = extractvalue { [2 x i64] } %23, 0
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %25 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %26 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %22
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"0.0" = phi [2 x i64] [ zeroinitializer, %cond_16_case_0 ], [ %24, %cond_16_case_1 ]
  %28 = icmp ult i64 0, 2
  br i1 %28, label %30, label %29

29:                                               ; preds = %cond_exit_16
  br label %37

30:                                               ; preds = %cond_exit_16
  %31 = alloca i64, i32 2, align 8
  %32 = bitcast i64* %31 to [2 x i64]*
  store [2 x i64] %"0.0", [2 x i64]* %32, align 4
  %33 = getelementptr inbounds i64, i64* %31, i64 0
  %34 = load i64, i64* %33, align 4
  %35 = insertvalue { i64 } undef, i64 %34, 0
  %36 = insertvalue { i32, {}, { i64 } } { i32 1, {} poison, { i64 } poison }, { i64 } %35, 2
  br label %37

37:                                               ; preds = %29, %30
  %"018.0" = phi { i32, {}, { i64 } } [ %36, %30 ], [ { i32 0, {} undef, { i64 } poison }, %29 ]
  %38 = extractvalue { i32, {}, { i64 } } %"018.0", 0
  switch i32 %38, label %39 [
    i32 1, label %41
  ]

39:                                               ; preds = %37
  %40 = extractvalue { i32, {}, { i64 } } %"018.0", 1
  br label %cond_28_case_0

41:                                               ; preds = %37
  %42 = extractvalue { i32, {}, { i64 } } %"018.0", 2
  %43 = extractvalue { i64 } %42, 0
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %39
  %44 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %45 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %44, i8* %45)
  call void @abort()
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %41
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"021.0" = phi i64 [ 0, %cond_28_case_0 ], [ %43, %cond_28_case_1 ]
  %47 = icmp ult i64 1, 2
  br i1 %47, label %52, label %48

48:                                               ; preds = %cond_exit_28
  %49 = insertvalue { i64, [2 x i64] } undef, i64 %"021.0", 0
  %50 = insertvalue { i64, [2 x i64] } %49, [2 x i64] %"0.0", 1
  %51 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 0, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %50, 1
  br label %62

52:                                               ; preds = %cond_exit_28
  %53 = alloca i64, i32 2, align 8
  %54 = bitcast i64* %53 to [2 x i64]*
  store [2 x i64] %"0.0", [2 x i64]* %54, align 4
  %55 = getelementptr inbounds i64, i64* %53, i64 1
  %56 = load i64, i64* %55, align 4
  store i64 %"021.0", i64* %55, align 4
  %57 = bitcast i64* %53 to [2 x i64]*
  %58 = load [2 x i64], [2 x i64]* %57, align 4
  %59 = insertvalue { i64, [2 x i64] } undef, i64 %56, 0
  %60 = insertvalue { i64, [2 x i64] } %59, [2 x i64] %58, 1
  %61 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 1, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %60, 2
  br label %62

62:                                               ; preds = %48, %52
  %"031.0" = phi { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } [ %61, %52 ], [ %51, %48 ]
  %63 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"031.0", 0
  switch i32 %63, label %64 [
    i32 1, label %68
  ]

64:                                               ; preds = %62
  %65 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"031.0", 1
  %66 = extractvalue { i64, [2 x i64] } %65, 0
  %67 = extractvalue { i64, [2 x i64] } %65, 1
  br label %cond_40_case_0

68:                                               ; preds = %62
  %69 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"031.0", 2
  %70 = extractvalue { i64, [2 x i64] } %69, 0
  %71 = extractvalue { i64, [2 x i64] } %69, 1
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %64
  %72 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 0
  %73 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 1
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %72, i8* %73)
  call void @abort()
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %68
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"034.0" = phi i64 [ 0, %cond_40_case_0 ], [ %70, %cond_40_case_1 ]
  %"1.0" = phi [2 x i64] [ zeroinitializer, %cond_40_case_0 ], [ %71, %cond_40_case_1 ]
  %75 = alloca i64, i32 2, align 8
  %76 = bitcast i64* %75 to [2 x i64]*
  store [2 x i64] %"1.0", [2 x i64]* %76, align 4
  %77 = getelementptr i64, i64* %75, i32 1
  %78 = load i64, i64* %75, align 4
  %79 = bitcast i64* %77 to [1 x i64]*
  %80 = load [1 x i64], [1 x i64]* %79, align 4
  %81 = insertvalue { i64, [1 x i64] } undef, i64 %78, 0
  %82 = insertvalue { i64, [1 x i64] } %81, [1 x i64] %80, 1
  %83 = insertvalue { i32, {}, { i64, [1 x i64] } } { i32 1, {} poison, { i64, [1 x i64] } poison }, { i64, [1 x i64] } %82, 2
  %84 = extractvalue { i32, {}, { i64, [1 x i64] } } %83, 0
  switch i32 %84, label %85 [
    i32 1, label %87
  ]

85:                                               ; preds = %cond_exit_40
  %86 = extractvalue { i32, {}, { i64, [1 x i64] } } %83, 1
  br label %cond_51_case_0

87:                                               ; preds = %cond_exit_40
  %88 = extractvalue { i32, {}, { i64, [1 x i64] } } %83, 2
  %89 = extractvalue { i64, [1 x i64] } %88, 0
  %90 = extractvalue { i64, [1 x i64] } %88, 1
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %85
  %91 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 0
  %92 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 1
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %91, i8* %92)
  call void @abort()
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %87
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"054.0" = phi i64 [ 0, %cond_51_case_0 ], [ %89, %cond_51_case_1 ]
  %"155.0" = phi [1 x i64] [ zeroinitializer, %cond_51_case_0 ], [ %90, %cond_51_case_1 ]
  %94 = alloca i64, align 8
  %95 = bitcast i64* %94 to [1 x i64]*
  store [1 x i64] %"155.0", [1 x i64]* %95, align 4
  %96 = getelementptr i64, i64* %94, i32 0
  %97 = load i64, i64* %96, align 4
  %98 = bitcast i64* %94 to [0 x i64]*
  %99 = load [0 x i64], [0 x i64]* %98, align 4
  %100 = insertvalue { i64, [0 x i64] } undef, i64 %97, 0
  %101 = insertvalue { i64, [0 x i64] } %100, [0 x i64] %99, 1
  %102 = insertvalue { i32, {}, { i64, [0 x i64] } } { i32 1, {} poison, { i64, [0 x i64] } poison }, { i64, [0 x i64] } %101, 2
  %103 = extractvalue { i32, {}, { i64, [0 x i64] } } %102, 0
  switch i32 %103, label %104 [
    i32 1, label %106
  ]

104:                                              ; preds = %cond_exit_51
  %105 = extractvalue { i32, {}, { i64, [0 x i64] } } %102, 1
  br label %cond_62_case_0

106:                                              ; preds = %cond_exit_51
  %107 = extractvalue { i32, {}, { i64, [0 x i64] } } %102, 2
  %108 = extractvalue { i64, [0 x i64] } %107, 0
  %109 = extractvalue { i64, [0 x i64] } %107, 1
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %104
  %110 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %111 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %110, i8* %111)
  call void @abort()
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %106
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"069.0" = phi i64 [ 0, %cond_62_case_0 ], [ %108, %cond_62_case_1 ]
  %"170.0" = phi [0 x i64] [ zeroinitializer, %cond_62_case_0 ], [ %109, %cond_62_case_1 ]
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
