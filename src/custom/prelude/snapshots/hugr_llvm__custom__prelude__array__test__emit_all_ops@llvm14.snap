---
source: src/custom/prelude/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = insertvalue [2 x i64] undef, i64 1, 0
  %1 = insertvalue [2 x i64] %0, i64 2, 1
  %2 = alloca [2 x i64], align 8
  %3 = bitcast [2 x i64]* %2 to i64*
  store [2 x i64] %1, [2 x i64]* %2, align 4
  %4 = getelementptr i64, i64* %3, i64 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %3, i64 1
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %4, align 4
  store i64 %5, i64* %6, align 4
  %8 = bitcast i64* %3 to [2 x i64]*
  %9 = load [2 x i64], [2 x i64]* %8, align 4
  %10 = insertvalue { [2 x i64] } undef, [2 x i64] %9, 0
  %11 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 1, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %10, 2
  %12 = insertvalue { [2 x i64] } undef, [2 x i64] %1, 0
  %13 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 0, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %12, 1
  %14 = icmp ult i64 0, 2
  %15 = icmp ult i64 1, 2
  %16 = and i1 %14, %15
  %17 = select i1 %16, { i32, { [2 x i64] }, { [2 x i64] } } %11, { i32, { [2 x i64] }, { [2 x i64] } } %13
  %18 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 0
  switch i32 %18, label %19 [
    i32 1, label %22
  ]

19:                                               ; preds = %entry_block
  %20 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 1
  %21 = extractvalue { [2 x i64] } %20, 0
  br label %cond_16_case_0

22:                                               ; preds = %entry_block
  %23 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %17, 2
  %24 = extractvalue { [2 x i64] } %23, 0
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %25 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %26 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %22
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"0.0" = phi [2 x i64] [ zeroinitializer, %cond_16_case_0 ], [ %24, %cond_16_case_1 ]
  %28 = icmp ult i64 0, 2
  br i1 %28, label %30, label %29

29:                                               ; preds = %cond_exit_16
  br label %37

30:                                               ; preds = %cond_exit_16
  %31 = alloca [2 x i64], align 8
  %32 = bitcast [2 x i64]* %31 to i64*
  store [2 x i64] %"0.0", [2 x i64]* %31, align 4
  %33 = getelementptr i64, i64* %32, i64 0
  %34 = load i64, i64* %33, align 4
  %35 = insertvalue { i64 } undef, i64 %34, 0
  %36 = insertvalue { i32, {}, { i64 } } { i32 1, {} poison, { i64 } poison }, { i64 } %35, 2
  br label %37

37:                                               ; preds = %29, %30
  %"018.0" = phi { i32, {}, { i64 } } [ %36, %30 ], [ { i32 0, {} undef, { i64 } poison }, %29 ]
  %38 = extractvalue { i32, {}, { i64 } } %"018.0", 0
  switch i32 %38, label %39 [
    i32 1, label %41
  ]

39:                                               ; preds = %37
  %40 = extractvalue { i32, {}, { i64 } } %"018.0", 1
  br label %cond_28_case_0

41:                                               ; preds = %37
  %42 = extractvalue { i32, {}, { i64 } } %"018.0", 2
  %43 = extractvalue { i64 } %42, 0
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %39
  %44 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %45 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %44, i8* %45)
  call void @abort()
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %41
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"021.0" = phi i64 [ 0, %cond_28_case_0 ], [ %43, %cond_28_case_1 ]
  %47 = alloca [2 x i64], align 8
  %48 = bitcast [2 x i64]* %47 to i64*
  store [2 x i64] %"0.0", [2 x i64]* %47, align 4
  %49 = getelementptr i64, i64* %48, i64 1
  %50 = load i64, i64* %49, align 4
  store i64 %"021.0", i64* %49, align 4
  %51 = bitcast i64* %48 to [2 x i64]*
  %52 = load [2 x i64], [2 x i64]* %51, align 4
  %53 = insertvalue { i64, [2 x i64] } undef, i64 %50, 0
  %54 = insertvalue { i64, [2 x i64] } %53, [2 x i64] %52, 1
  %55 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 1, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %54, 2
  %56 = insertvalue { i64, [2 x i64] } undef, i64 %"021.0", 0
  %57 = insertvalue { i64, [2 x i64] } %56, [2 x i64] %"0.0", 1
  %58 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 0, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %57, 1
  %59 = icmp ult i64 1, 2
  %60 = select i1 %59, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %55, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58
  %61 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %60, 0
  switch i32 %61, label %62 [
    i32 1, label %66
  ]

62:                                               ; preds = %cond_exit_28
  %63 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %60, 1
  %64 = extractvalue { i64, [2 x i64] } %63, 0
  %65 = extractvalue { i64, [2 x i64] } %63, 1
  br label %cond_40_case_0

66:                                               ; preds = %cond_exit_28
  %67 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %60, 2
  %68 = extractvalue { i64, [2 x i64] } %67, 0
  %69 = extractvalue { i64, [2 x i64] } %67, 1
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %62
  %70 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 0
  %71 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 1
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %70, i8* %71)
  call void @abort()
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %66
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"032.0" = phi i64 [ 0, %cond_40_case_0 ], [ %68, %cond_40_case_1 ]
  %"1.0" = phi [2 x i64] [ zeroinitializer, %cond_40_case_0 ], [ %69, %cond_40_case_1 ]
  %73 = alloca [2 x i64], align 8
  %74 = bitcast [2 x i64]* %73 to i64*
  store [2 x i64] %"1.0", [2 x i64]* %73, align 4
  %75 = getelementptr i64, i64* %74, i32 1
  %76 = load i64, i64* %74, align 4
  %77 = bitcast i64* %75 to [1 x i64]*
  %78 = load [1 x i64], [1 x i64]* %77, align 4
  %79 = insertvalue { i64, [1 x i64] } undef, i64 %76, 0
  %80 = insertvalue { i64, [1 x i64] } %79, [1 x i64] %78, 1
  %81 = insertvalue { i32, {}, { i64, [1 x i64] } } { i32 1, {} poison, { i64, [1 x i64] } poison }, { i64, [1 x i64] } %80, 2
  %82 = extractvalue { i32, {}, { i64, [1 x i64] } } %81, 0
  switch i32 %82, label %83 [
    i32 1, label %85
  ]

83:                                               ; preds = %cond_exit_40
  %84 = extractvalue { i32, {}, { i64, [1 x i64] } } %81, 1
  br label %cond_51_case_0

85:                                               ; preds = %cond_exit_40
  %86 = extractvalue { i32, {}, { i64, [1 x i64] } } %81, 2
  %87 = extractvalue { i64, [1 x i64] } %86, 0
  %88 = extractvalue { i64, [1 x i64] } %86, 1
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %83
  %89 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 0
  %90 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 1
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %89, i8* %90)
  call void @abort()
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %85
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"052.0" = phi i64 [ 0, %cond_51_case_0 ], [ %87, %cond_51_case_1 ]
  %"153.0" = phi [1 x i64] [ zeroinitializer, %cond_51_case_0 ], [ %88, %cond_51_case_1 ]
  %92 = alloca [1 x i64], align 8
  %93 = bitcast [1 x i64]* %92 to i64*
  store [1 x i64] %"153.0", [1 x i64]* %92, align 4
  %94 = getelementptr i64, i64* %93, i32 0
  %95 = load i64, i64* %94, align 4
  %96 = bitcast i64* %93 to [0 x i64]*
  %97 = load [0 x i64], [0 x i64]* %96, align 4
  %98 = insertvalue { i64, [0 x i64] } undef, i64 %95, 0
  %99 = insertvalue { i64, [0 x i64] } %98, [0 x i64] %97, 1
  %100 = insertvalue { i32, {}, { i64, [0 x i64] } } { i32 1, {} poison, { i64, [0 x i64] } poison }, { i64, [0 x i64] } %99, 2
  %101 = extractvalue { i32, {}, { i64, [0 x i64] } } %100, 0
  switch i32 %101, label %102 [
    i32 1, label %104
  ]

102:                                              ; preds = %cond_exit_51
  %103 = extractvalue { i32, {}, { i64, [0 x i64] } } %100, 1
  br label %cond_62_case_0

104:                                              ; preds = %cond_exit_51
  %105 = extractvalue { i32, {}, { i64, [0 x i64] } } %100, 2
  %106 = extractvalue { i64, [0 x i64] } %105, 0
  %107 = extractvalue { i64, [0 x i64] } %105, 1
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %102
  %108 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %109 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %108, i8* %109)
  call void @abort()
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %104
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"067.0" = phi i64 [ 0, %cond_62_case_0 ], [ %106, %cond_62_case_1 ]
  %"168.0" = phi [0 x i64] [ zeroinitializer, %cond_62_case_0 ], [ %107, %cond_62_case_1 ]
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
