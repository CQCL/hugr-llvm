---
source: src/custom/prelude/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  %"12_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"13_0" = alloca [2 x i64], align 8
  %"8_0" = alloca i64, align 8
  %"14_0" = alloca { i32, { [2 x i64] }, { [2 x i64] } }, align 8
  %"16_0" = alloca [2 x i64], align 8
  %"0" = alloca [2 x i64], align 8
  %"08" = alloca [2 x i64], align 8
  %"21_0" = alloca { i32, i8* }, align 8
  %"18_0" = alloca [2 x i64], align 8
  %"22_0" = alloca [2 x i64], align 8
  %"013" = alloca [2 x i64], align 8
  %"24_0" = alloca [2 x i64], align 8
  %"26_0" = alloca { i32, {}, { i64 } }, align 8
  %"018" = alloca { i32, {}, { i64 } }, align 8
  %"28_0" = alloca i64, align 8
  %"021" = alloca i64, align 8
  %"33_0" = alloca { i32, i8* }, align 8
  %"34_0" = alloca i64, align 8
  %"025" = alloca i64, align 8
  %"36_0" = alloca i64, align 8
  %"38_0" = alloca { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }, align 8
  %"40_0" = alloca i64, align 8
  %"40_1" = alloca [2 x i64], align 8
  %"032" = alloca i64, align 8
  %"1" = alloca [2 x i64], align 8
  %"035" = alloca i64, align 8
  %"136" = alloca [2 x i64], align 8
  %"45_0" = alloca { i32, i8* }, align 8
  %"42_0" = alloca i64, align 8
  %"42_1" = alloca [2 x i64], align 8
  %"46_0" = alloca i64, align 8
  %"46_1" = alloca [2 x i64], align 8
  %"044" = alloca i64, align 8
  %"145" = alloca [2 x i64], align 8
  %"48_0" = alloca i64, align 8
  %"48_1" = alloca [2 x i64], align 8
  %"50_0" = alloca { i32, {}, { i64, [1 x i64] } }, align 8
  %"51_0" = alloca i64, align 8
  %"51_1" = alloca [1 x i64], align 8
  %"052" = alloca i64, align 8
  %"153" = alloca [1 x i64], align 8
  %"56_0" = alloca { i32, i8* }, align 8
  %"57_0" = alloca i64, align 8
  %"57_1" = alloca [1 x i64], align 8
  %"059" = alloca i64, align 8
  %"160" = alloca [1 x i64], align 8
  %"59_0" = alloca i64, align 8
  %"59_1" = alloca [1 x i64], align 8
  %"61_0" = alloca { i32, {}, { i64, [0 x i64] } }, align 8
  %"62_0" = alloca i64, align 8
  %"62_1" = alloca [0 x i64], align 8
  %"067" = alloca i64, align 8
  %"168" = alloca [0 x i64], align 8
  %"67_0" = alloca { i32, i8* }, align 8
  %"68_0" = alloca i64, align 8
  %"68_1" = alloca [0 x i64], align 8
  %"074" = alloca i64, align 8
  %"175" = alloca [0 x i64], align 8
  %"70_0" = alloca i64, align 8
  %"70_1" = alloca [0 x i64], align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 2, i64* %"12_0", align 4
  store i64 1, i64* %"10_0", align 4
  %"10_01" = load i64, i64* %"10_0", align 4
  %"12_02" = load i64, i64* %"12_0", align 4
  %0 = insertvalue [2 x i64] undef, i64 %"10_01", 0
  %1 = insertvalue [2 x i64] %0, i64 %"12_02", 1
  store [2 x i64] %1, [2 x i64]* %"13_0", align 4
  store i64 0, i64* %"8_0", align 4
  %"13_03" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %"8_04" = load i64, i64* %"8_0", align 4
  %"10_05" = load i64, i64* %"10_0", align 4
  %2 = alloca [2 x i64], align 8
  %3 = bitcast [2 x i64]* %2 to i64*
  store [2 x i64] %"13_03", [2 x i64]* %2, align 4
  %4 = getelementptr i64, i64* %3, i64 %"8_04"
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %3, i64 %"10_05"
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %4, align 4
  store i64 %5, i64* %6, align 4
  %8 = bitcast i64* %3 to [2 x i64]*
  %9 = load [2 x i64], [2 x i64]* %8, align 4
  %10 = insertvalue { [2 x i64] } undef, [2 x i64] %9, 0
  %11 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 1, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %10, 2
  %12 = insertvalue { [2 x i64] } undef, [2 x i64] %"13_03", 0
  %13 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 0, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %12, 1
  %14 = icmp ult i64 %"8_04", 2
  %15 = icmp ult i64 %"10_05", 2
  %16 = and i1 %14, %15
  %17 = select i1 %16, { i32, { [2 x i64] }, { [2 x i64] } } %11, { i32, { [2 x i64] }, { [2 x i64] } } %13
  store { i32, { [2 x i64] }, { [2 x i64] } } %17, { i32, { [2 x i64] }, { [2 x i64] } }* %"14_0", align 4
  %"14_06" = load { i32, { [2 x i64] }, { [2 x i64] } }, { i32, { [2 x i64] }, { [2 x i64] } }* %"14_0", align 4
  %18 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 0
  switch i32 %18, label %19 [
    i32 1, label %22
  ]

19:                                               ; preds = %entry_block
  %20 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 1
  %21 = extractvalue { [2 x i64] } %20, 0
  store [2 x i64] %21, [2 x i64]* %"08", align 4
  br label %cond_16_case_0

22:                                               ; preds = %entry_block
  %23 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 2
  %24 = extractvalue { [2 x i64] } %23, 0
  store [2 x i64] %24, [2 x i64]* %"013", align 4
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %"09" = load [2 x i64], [2 x i64]* %"08", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"21_0", align 8
  store [2 x i64] %"09", [2 x i64]* %"18_0", align 4
  %"21_010" = load { i32, i8* }, { i32, i8* }* %"21_0", align 8
  %"18_011" = load [2 x i64], [2 x i64]* %"18_0", align 4
  %25 = extractvalue { i32, i8* } %"21_010", 0
  %26 = extractvalue { i32, i8* } %"21_010", 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  store [2 x i64] zeroinitializer, [2 x i64]* %"22_0", align 4
  %"22_012" = load [2 x i64], [2 x i64]* %"22_0", align 4
  store [2 x i64] %"22_012", [2 x i64]* %"0", align 4
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %22
  %"014" = load [2 x i64], [2 x i64]* %"013", align 4
  store [2 x i64] %"014", [2 x i64]* %"24_0", align 4
  %"24_015" = load [2 x i64], [2 x i64]* %"24_0", align 4
  store [2 x i64] %"24_015", [2 x i64]* %"0", align 4
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"07" = load [2 x i64], [2 x i64]* %"0", align 4
  store [2 x i64] %"07", [2 x i64]* %"16_0", align 4
  %"16_016" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"8_017" = load i64, i64* %"8_0", align 4
  %28 = icmp ult i64 %"8_017", 2
  br i1 %28, label %30, label %29

29:                                               ; preds = %cond_exit_16
  store { i32, {}, { i64 } } { i32 0, {} undef, { i64 } poison }, { i32, {}, { i64 } }* %"018", align 4
  br label %37

30:                                               ; preds = %cond_exit_16
  %31 = alloca [2 x i64], align 8
  %32 = bitcast [2 x i64]* %31 to i64*
  store [2 x i64] %"16_016", [2 x i64]* %31, align 4
  %33 = getelementptr i64, i64* %32, i64 %"8_017"
  %34 = load i64, i64* %33, align 4
  %35 = insertvalue { i64 } undef, i64 %34, 0
  %36 = insertvalue { i32, {}, { i64 } } { i32 1, {} poison, { i64 } poison }, { i64 } %35, 2
  store { i32, {}, { i64 } } %36, { i32, {}, { i64 } }* %"018", align 4
  br label %37

37:                                               ; preds = %29, %30
  %"019" = load { i32, {}, { i64 } }, { i32, {}, { i64 } }* %"018", align 4
  store { i32, {}, { i64 } } %"019", { i32, {}, { i64 } }* %"26_0", align 4
  %"26_020" = load { i32, {}, { i64 } }, { i32, {}, { i64 } }* %"26_0", align 4
  %38 = extractvalue { i32, {}, { i64 } } %"26_020", 0
  switch i32 %38, label %39 [
    i32 1, label %41
  ]

39:                                               ; preds = %37
  %40 = extractvalue { i32, {}, { i64 } } %"26_020", 1
  br label %cond_28_case_0

41:                                               ; preds = %37
  %42 = extractvalue { i32, {}, { i64 } } %"26_020", 2
  %43 = extractvalue { i64 } %42, 0
  store i64 %43, i64* %"025", align 4
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %39
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"33_0", align 8
  %"33_023" = load { i32, i8* }, { i32, i8* }* %"33_0", align 8
  %44 = extractvalue { i32, i8* } %"33_023", 0
  %45 = extractvalue { i32, i8* } %"33_023", 1
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %44, i8* %45)
  call void @abort()
  store i64 0, i64* %"34_0", align 4
  %"34_024" = load i64, i64* %"34_0", align 4
  store i64 %"34_024", i64* %"021", align 4
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %41
  %"026" = load i64, i64* %"025", align 4
  store i64 %"026", i64* %"36_0", align 4
  %"36_027" = load i64, i64* %"36_0", align 4
  store i64 %"36_027", i64* %"021", align 4
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"022" = load i64, i64* %"021", align 4
  store i64 %"022", i64* %"28_0", align 4
  %"16_028" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"10_029" = load i64, i64* %"10_0", align 4
  %"28_030" = load i64, i64* %"28_0", align 4
  %47 = alloca [2 x i64], align 8
  %48 = bitcast [2 x i64]* %47 to i64*
  store [2 x i64] %"16_028", [2 x i64]* %47, align 4
  %49 = getelementptr i64, i64* %48, i64 %"10_029"
  %50 = load i64, i64* %49, align 4
  store i64 %"28_030", i64* %49, align 4
  %51 = bitcast i64* %48 to [2 x i64]*
  %52 = load [2 x i64], [2 x i64]* %51, align 4
  %53 = insertvalue { i64, [2 x i64] } undef, i64 %50, 0
  %54 = insertvalue { i64, [2 x i64] } %53, [2 x i64] %52, 1
  %55 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 1, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %54, 2
  %56 = insertvalue { i64, [2 x i64] } undef, i64 %"28_030", 0
  %57 = insertvalue { i64, [2 x i64] } %56, [2 x i64] %"16_028", 1
  %58 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 0, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %57, 1
  %59 = icmp ult i64 %"10_029", 2
  %60 = select i1 %59, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %55, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58
  store { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %60, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }* %"38_0", align 4
  %"38_031" = load { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }* %"38_0", align 4
  %61 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_031", 0
  switch i32 %61, label %62 [
    i32 1, label %66
  ]

62:                                               ; preds = %cond_exit_28
  %63 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_031", 1
  %64 = extractvalue { i64, [2 x i64] } %63, 0
  %65 = extractvalue { i64, [2 x i64] } %63, 1
  store i64 %64, i64* %"035", align 4
  store [2 x i64] %65, [2 x i64]* %"136", align 4
  br label %cond_40_case_0

66:                                               ; preds = %cond_exit_28
  %67 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_031", 2
  %68 = extractvalue { i64, [2 x i64] } %67, 0
  %69 = extractvalue { i64, [2 x i64] } %67, 1
  store i64 %68, i64* %"044", align 4
  store [2 x i64] %69, [2 x i64]* %"145", align 4
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %62
  %"037" = load i64, i64* %"035", align 4
  %"138" = load [2 x i64], [2 x i64]* %"136", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, { i32, i8* }* %"45_0", align 8
  store i64 %"037", i64* %"42_0", align 4
  store [2 x i64] %"138", [2 x i64]* %"42_1", align 4
  %"45_039" = load { i32, i8* }, { i32, i8* }* %"45_0", align 8
  %"42_040" = load i64, i64* %"42_0", align 4
  %"42_141" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %70 = extractvalue { i32, i8* } %"45_039", 0
  %71 = extractvalue { i32, i8* } %"45_039", 1
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %70, i8* %71)
  call void @abort()
  store i64 0, i64* %"46_0", align 4
  store [2 x i64] zeroinitializer, [2 x i64]* %"46_1", align 4
  %"46_042" = load i64, i64* %"46_0", align 4
  %"46_143" = load [2 x i64], [2 x i64]* %"46_1", align 4
  store i64 %"46_042", i64* %"032", align 4
  store [2 x i64] %"46_143", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %66
  %"046" = load i64, i64* %"044", align 4
  %"147" = load [2 x i64], [2 x i64]* %"145", align 4
  store i64 %"046", i64* %"48_0", align 4
  store [2 x i64] %"147", [2 x i64]* %"48_1", align 4
  %"48_048" = load i64, i64* %"48_0", align 4
  %"48_149" = load [2 x i64], [2 x i64]* %"48_1", align 4
  store i64 %"48_048", i64* %"032", align 4
  store [2 x i64] %"48_149", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"033" = load i64, i64* %"032", align 4
  %"134" = load [2 x i64], [2 x i64]* %"1", align 4
  store i64 %"033", i64* %"40_0", align 4
  store [2 x i64] %"134", [2 x i64]* %"40_1", align 4
  %"40_150" = load [2 x i64], [2 x i64]* %"40_1", align 4
  %73 = alloca [2 x i64], align 8
  %74 = bitcast [2 x i64]* %73 to i64*
  store [2 x i64] %"40_150", [2 x i64]* %73, align 4
  %75 = getelementptr i64, i64* %74, i32 1
  %76 = load i64, i64* %74, align 4
  %77 = bitcast i64* %75 to [1 x i64]*
  %78 = load [1 x i64], [1 x i64]* %77, align 4
  %79 = insertvalue { i64, [1 x i64] } undef, i64 %76, 0
  %80 = insertvalue { i64, [1 x i64] } %79, [1 x i64] %78, 1
  %81 = insertvalue { i32, {}, { i64, [1 x i64] } } { i32 1, {} poison, { i64, [1 x i64] } poison }, { i64, [1 x i64] } %80, 2
  store { i32, {}, { i64, [1 x i64] } } %81, { i32, {}, { i64, [1 x i64] } }* %"50_0", align 4
  %"50_051" = load { i32, {}, { i64, [1 x i64] } }, { i32, {}, { i64, [1 x i64] } }* %"50_0", align 4
  %82 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_051", 0
  switch i32 %82, label %83 [
    i32 1, label %85
  ]

83:                                               ; preds = %cond_exit_40
  %84 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_051", 1
  br label %cond_51_case_0

85:                                               ; preds = %cond_exit_40
  %86 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_051", 2
  %87 = extractvalue { i64, [1 x i64] } %86, 0
  %88 = extractvalue { i64, [1 x i64] } %86, 1
  store i64 %87, i64* %"059", align 4
  store [1 x i64] %88, [1 x i64]* %"160", align 4
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %83
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, { i32, i8* }* %"56_0", align 8
  %"56_056" = load { i32, i8* }, { i32, i8* }* %"56_0", align 8
  %89 = extractvalue { i32, i8* } %"56_056", 0
  %90 = extractvalue { i32, i8* } %"56_056", 1
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %89, i8* %90)
  call void @abort()
  store i64 0, i64* %"57_0", align 4
  store [1 x i64] zeroinitializer, [1 x i64]* %"57_1", align 4
  %"57_057" = load i64, i64* %"57_0", align 4
  %"57_158" = load [1 x i64], [1 x i64]* %"57_1", align 4
  store i64 %"57_057", i64* %"052", align 4
  store [1 x i64] %"57_158", [1 x i64]* %"153", align 4
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %85
  %"061" = load i64, i64* %"059", align 4
  %"162" = load [1 x i64], [1 x i64]* %"160", align 4
  store i64 %"061", i64* %"59_0", align 4
  store [1 x i64] %"162", [1 x i64]* %"59_1", align 4
  %"59_063" = load i64, i64* %"59_0", align 4
  %"59_164" = load [1 x i64], [1 x i64]* %"59_1", align 4
  store i64 %"59_063", i64* %"052", align 4
  store [1 x i64] %"59_164", [1 x i64]* %"153", align 4
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"054" = load i64, i64* %"052", align 4
  %"155" = load [1 x i64], [1 x i64]* %"153", align 4
  store i64 %"054", i64* %"51_0", align 4
  store [1 x i64] %"155", [1 x i64]* %"51_1", align 4
  %"51_165" = load [1 x i64], [1 x i64]* %"51_1", align 4
  %92 = alloca [1 x i64], align 8
  %93 = bitcast [1 x i64]* %92 to i64*
  store [1 x i64] %"51_165", [1 x i64]* %92, align 4
  %94 = getelementptr i64, i64* %93, i32 0
  %95 = load i64, i64* %94, align 4
  %96 = bitcast i64* %93 to [0 x i64]*
  %97 = load [0 x i64], [0 x i64]* %96, align 4
  %98 = insertvalue { i64, [0 x i64] } undef, i64 %95, 0
  %99 = insertvalue { i64, [0 x i64] } %98, [0 x i64] %97, 1
  %100 = insertvalue { i32, {}, { i64, [0 x i64] } } { i32 1, {} poison, { i64, [0 x i64] } poison }, { i64, [0 x i64] } %99, 2
  store { i32, {}, { i64, [0 x i64] } } %100, { i32, {}, { i64, [0 x i64] } }* %"61_0", align 4
  %"61_066" = load { i32, {}, { i64, [0 x i64] } }, { i32, {}, { i64, [0 x i64] } }* %"61_0", align 4
  %101 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_066", 0
  switch i32 %101, label %102 [
    i32 1, label %104
  ]

102:                                              ; preds = %cond_exit_51
  %103 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_066", 1
  br label %cond_62_case_0

104:                                              ; preds = %cond_exit_51
  %105 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_066", 2
  %106 = extractvalue { i64, [0 x i64] } %105, 0
  %107 = extractvalue { i64, [0 x i64] } %105, 1
  store i64 %106, i64* %"074", align 4
  store [0 x i64] %107, [0 x i64]* %"175", align 4
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %102
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, { i32, i8* }* %"67_0", align 8
  %"67_071" = load { i32, i8* }, { i32, i8* }* %"67_0", align 8
  %108 = extractvalue { i32, i8* } %"67_071", 0
  %109 = extractvalue { i32, i8* } %"67_071", 1
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %108, i8* %109)
  call void @abort()
  store i64 0, i64* %"68_0", align 4
  store [0 x i64] zeroinitializer, [0 x i64]* %"68_1", align 4
  %"68_072" = load i64, i64* %"68_0", align 4
  %"68_173" = load [0 x i64], [0 x i64]* %"68_1", align 4
  store i64 %"68_072", i64* %"067", align 4
  store [0 x i64] %"68_173", [0 x i64]* %"168", align 4
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %104
  %"076" = load i64, i64* %"074", align 4
  %"177" = load [0 x i64], [0 x i64]* %"175", align 4
  store i64 %"076", i64* %"70_0", align 4
  store [0 x i64] %"177", [0 x i64]* %"70_1", align 4
  %"70_078" = load i64, i64* %"70_0", align 4
  %"70_179" = load [0 x i64], [0 x i64]* %"70_1", align 4
  store i64 %"70_078", i64* %"067", align 4
  store [0 x i64] %"70_179", [0 x i64]* %"168", align 4
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"069" = load i64, i64* %"067", align 4
  %"170" = load [0 x i64], [0 x i64]* %"168", align 4
  store i64 %"069", i64* %"62_0", align 4
  store [0 x i64] %"170", [0 x i64]* %"62_1", align 4
  %"62_180" = load [0 x i64], [0 x i64]* %"62_1", align 4
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
