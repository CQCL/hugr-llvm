---
source: src/custom/prelude/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  %"12_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"13_0" = alloca [2 x i64], align 8
  %"8_0" = alloca i64, align 8
  %"14_0" = alloca { i32, { [2 x i64] }, { [2 x i64] } }, align 8
  %"16_0" = alloca [2 x i64], align 8
  %"0" = alloca [2 x i64], align 8
  %"08" = alloca [2 x i64], align 8
  %"21_0" = alloca { i32, i8* }, align 8
  %"18_0" = alloca [2 x i64], align 8
  %"22_0" = alloca [2 x i64], align 8
  %"013" = alloca [2 x i64], align 8
  %"24_0" = alloca [2 x i64], align 8
  %"26_0" = alloca { i32, {}, { i64 } }, align 8
  %"28_0" = alloca i64, align 8
  %"019" = alloca i64, align 8
  %"33_0" = alloca { i32, i8* }, align 8
  %"34_0" = alloca i64, align 8
  %"023" = alloca i64, align 8
  %"36_0" = alloca i64, align 8
  %"38_0" = alloca { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }, align 8
  %"40_0" = alloca i64, align 8
  %"40_1" = alloca [2 x i64], align 8
  %"030" = alloca i64, align 8
  %"1" = alloca [2 x i64], align 8
  %"033" = alloca i64, align 8
  %"134" = alloca [2 x i64], align 8
  %"45_0" = alloca { i32, i8* }, align 8
  %"42_0" = alloca i64, align 8
  %"42_1" = alloca [2 x i64], align 8
  %"46_0" = alloca i64, align 8
  %"46_1" = alloca [2 x i64], align 8
  %"042" = alloca i64, align 8
  %"143" = alloca [2 x i64], align 8
  %"48_0" = alloca i64, align 8
  %"48_1" = alloca [2 x i64], align 8
  %"50_0" = alloca { i32, {}, { i64, [1 x i64] } }, align 8
  %"51_0" = alloca i64, align 8
  %"51_1" = alloca [1 x i64], align 8
  %"050" = alloca i64, align 8
  %"151" = alloca [1 x i64], align 8
  %"56_0" = alloca { i32, i8* }, align 8
  %"57_0" = alloca i64, align 8
  %"57_1" = alloca [1 x i64], align 8
  %"057" = alloca i64, align 8
  %"158" = alloca [1 x i64], align 8
  %"59_0" = alloca i64, align 8
  %"59_1" = alloca [1 x i64], align 8
  %"61_0" = alloca { i32, {}, { i64, [0 x i64] } }, align 8
  %"62_0" = alloca i64, align 8
  %"62_1" = alloca [0 x i64], align 8
  %"065" = alloca i64, align 8
  %"166" = alloca [0 x i64], align 8
  %"67_0" = alloca { i32, i8* }, align 8
  %"68_0" = alloca i64, align 8
  %"68_1" = alloca [0 x i64], align 8
  %"072" = alloca i64, align 8
  %"173" = alloca [0 x i64], align 8
  %"70_0" = alloca i64, align 8
  %"70_1" = alloca [0 x i64], align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 2, i64* %"12_0", align 4
  store i64 1, i64* %"10_0", align 4
  %"10_01" = load i64, i64* %"10_0", align 4
  %"12_02" = load i64, i64* %"12_0", align 4
  %0 = insertvalue [2 x i64] undef, i64 %"10_01", 0
  %1 = insertvalue [2 x i64] %0, i64 %"12_02", 1
  store [2 x i64] %1, [2 x i64]* %"13_0", align 4
  store i64 0, i64* %"8_0", align 4
  %"13_03" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %"8_04" = load i64, i64* %"8_0", align 4
  %"10_05" = load i64, i64* %"10_0", align 4
  %2 = alloca i64, i32 2, align 8
  %3 = bitcast i64* %2 to [2 x i64]*
  store [2 x i64] %"13_03", [2 x i64]* %3, align 4
  %4 = getelementptr i64, i64* %2, i64 %"8_04"
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %2, i64 %"10_05"
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %4, align 4
  store i64 %5, i64* %6, align 4
  %8 = bitcast i64* %2 to [2 x i64]*
  %9 = load [2 x i64], [2 x i64]* %8, align 4
  %10 = insertvalue { [2 x i64] } undef, [2 x i64] %9, 0
  %11 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 1, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %10, 2
  %12 = insertvalue { [2 x i64] } undef, [2 x i64] %"13_03", 0
  %13 = insertvalue { i32, { [2 x i64] }, { [2 x i64] } } { i32 0, { [2 x i64] } poison, { [2 x i64] } poison }, { [2 x i64] } %12, 1
  %14 = icmp ult i64 %"8_04", 2
  %15 = icmp ult i64 %"10_05", 2
  %16 = and i1 %14, %15
  %17 = select i1 %16, { i32, { [2 x i64] }, { [2 x i64] } } %11, { i32, { [2 x i64] }, { [2 x i64] } } %13
  store { i32, { [2 x i64] }, { [2 x i64] } } %17, { i32, { [2 x i64] }, { [2 x i64] } }* %"14_0", align 4
  %"14_06" = load { i32, { [2 x i64] }, { [2 x i64] } }, { i32, { [2 x i64] }, { [2 x i64] } }* %"14_0", align 4
  %18 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 0
  switch i32 %18, label %19 [
    i32 1, label %22
  ]

19:                                               ; preds = %entry_block
  %20 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 1
  %21 = extractvalue { [2 x i64] } %20, 0
  store [2 x i64] %21, [2 x i64]* %"08", align 4
  br label %cond_16_case_0

22:                                               ; preds = %entry_block
  %23 = extractvalue { i32, { [2 x i64] }, { [2 x i64] } } %"14_06", 2
  %24 = extractvalue { [2 x i64] } %23, 0
  store [2 x i64] %24, [2 x i64]* %"013", align 4
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %"09" = load [2 x i64], [2 x i64]* %"08", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"21_0", align 8
  store [2 x i64] %"09", [2 x i64]* %"18_0", align 4
  %"21_010" = load { i32, i8* }, { i32, i8* }* %"21_0", align 8
  %"18_011" = load [2 x i64], [2 x i64]* %"18_0", align 4
  %25 = extractvalue { i32, i8* } %"21_010", 0
  %26 = extractvalue { i32, i8* } %"21_010", 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  store [2 x i64] zeroinitializer, [2 x i64]* %"22_0", align 4
  %"22_012" = load [2 x i64], [2 x i64]* %"22_0", align 4
  store [2 x i64] %"22_012", [2 x i64]* %"0", align 4
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %22
  %"014" = load [2 x i64], [2 x i64]* %"013", align 4
  store [2 x i64] %"014", [2 x i64]* %"24_0", align 4
  %"24_015" = load [2 x i64], [2 x i64]* %"24_0", align 4
  store [2 x i64] %"24_015", [2 x i64]* %"0", align 4
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"07" = load [2 x i64], [2 x i64]* %"0", align 4
  store [2 x i64] %"07", [2 x i64]* %"16_0", align 4
  %"16_016" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"8_017" = load i64, i64* %"8_0", align 4
  %28 = alloca i64, i32 2, align 8
  %29 = bitcast i64* %28 to [2 x i64]*
  store [2 x i64] %"16_016", [2 x i64]* %29, align 4
  %30 = getelementptr i64, i64* %28, i64 %"8_017"
  %31 = load i64, i64* %30, align 4
  %32 = insertvalue { i64 } undef, i64 %31, 0
  %33 = insertvalue { i32, {}, { i64 } } { i32 1, {} poison, { i64 } poison }, { i64 } %32, 2
  %34 = icmp ult i64 %"8_017", 2
  %35 = select i1 %34, { i32, {}, { i64 } } %33, { i32, {}, { i64 } } { i32 0, {} undef, { i64 } poison }
  store { i32, {}, { i64 } } %35, { i32, {}, { i64 } }* %"26_0", align 4
  %"26_018" = load { i32, {}, { i64 } }, { i32, {}, { i64 } }* %"26_0", align 4
  %36 = extractvalue { i32, {}, { i64 } } %"26_018", 0
  switch i32 %36, label %37 [
    i32 1, label %39
  ]

37:                                               ; preds = %cond_exit_16
  %38 = extractvalue { i32, {}, { i64 } } %"26_018", 1
  br label %cond_28_case_0

39:                                               ; preds = %cond_exit_16
  %40 = extractvalue { i32, {}, { i64 } } %"26_018", 2
  %41 = extractvalue { i64 } %40, 0
  store i64 %41, i64* %"023", align 4
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %37
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"33_0", align 8
  %"33_021" = load { i32, i8* }, { i32, i8* }* %"33_0", align 8
  %42 = extractvalue { i32, i8* } %"33_021", 0
  %43 = extractvalue { i32, i8* } %"33_021", 1
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %42, i8* %43)
  call void @abort()
  store i64 0, i64* %"34_0", align 4
  %"34_022" = load i64, i64* %"34_0", align 4
  store i64 %"34_022", i64* %"019", align 4
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %39
  %"024" = load i64, i64* %"023", align 4
  store i64 %"024", i64* %"36_0", align 4
  %"36_025" = load i64, i64* %"36_0", align 4
  store i64 %"36_025", i64* %"019", align 4
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"020" = load i64, i64* %"019", align 4
  store i64 %"020", i64* %"28_0", align 4
  %"16_026" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"10_027" = load i64, i64* %"10_0", align 4
  %"28_028" = load i64, i64* %"28_0", align 4
  %45 = alloca i64, i32 2, align 8
  %46 = bitcast i64* %45 to [2 x i64]*
  store [2 x i64] %"16_026", [2 x i64]* %46, align 4
  %47 = getelementptr i64, i64* %45, i64 %"10_027"
  %48 = load i64, i64* %47, align 4
  store i64 %"28_028", i64* %47, align 4
  %49 = bitcast i64* %45 to [2 x i64]*
  %50 = load [2 x i64], [2 x i64]* %49, align 4
  %51 = insertvalue { i64, [2 x i64] } undef, i64 %48, 0
  %52 = insertvalue { i64, [2 x i64] } %51, [2 x i64] %50, 1
  %53 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 1, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %52, 2
  %54 = insertvalue { i64, [2 x i64] } undef, i64 %"28_028", 0
  %55 = insertvalue { i64, [2 x i64] } %54, [2 x i64] %"16_026", 1
  %56 = insertvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } { i32 0, { i64, [2 x i64] } poison, { i64, [2 x i64] } poison }, { i64, [2 x i64] } %55, 1
  %57 = icmp ult i64 %"10_027", 2
  %58 = select i1 %57, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %53, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %56
  store { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %58, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }* %"38_0", align 4
  %"38_029" = load { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }, { i32, { i64, [2 x i64] }, { i64, [2 x i64] } }* %"38_0", align 4
  %59 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_029", 0
  switch i32 %59, label %60 [
    i32 1, label %64
  ]

60:                                               ; preds = %cond_exit_28
  %61 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_029", 1
  %62 = extractvalue { i64, [2 x i64] } %61, 0
  %63 = extractvalue { i64, [2 x i64] } %61, 1
  store i64 %62, i64* %"033", align 4
  store [2 x i64] %63, [2 x i64]* %"134", align 4
  br label %cond_40_case_0

64:                                               ; preds = %cond_exit_28
  %65 = extractvalue { i32, { i64, [2 x i64] }, { i64, [2 x i64] } } %"38_029", 2
  %66 = extractvalue { i64, [2 x i64] } %65, 0
  %67 = extractvalue { i64, [2 x i64] } %65, 1
  store i64 %66, i64* %"042", align 4
  store [2 x i64] %67, [2 x i64]* %"143", align 4
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %60
  %"035" = load i64, i64* %"033", align 4
  %"136" = load [2 x i64], [2 x i64]* %"134", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, { i32, i8* }* %"45_0", align 8
  store i64 %"035", i64* %"42_0", align 4
  store [2 x i64] %"136", [2 x i64]* %"42_1", align 4
  %"45_037" = load { i32, i8* }, { i32, i8* }* %"45_0", align 8
  %"42_038" = load i64, i64* %"42_0", align 4
  %"42_139" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %68 = extractvalue { i32, i8* } %"45_037", 0
  %69 = extractvalue { i32, i8* } %"45_037", 1
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %68, i8* %69)
  call void @abort()
  store i64 0, i64* %"46_0", align 4
  store [2 x i64] zeroinitializer, [2 x i64]* %"46_1", align 4
  %"46_040" = load i64, i64* %"46_0", align 4
  %"46_141" = load [2 x i64], [2 x i64]* %"46_1", align 4
  store i64 %"46_040", i64* %"030", align 4
  store [2 x i64] %"46_141", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %64
  %"044" = load i64, i64* %"042", align 4
  %"145" = load [2 x i64], [2 x i64]* %"143", align 4
  store i64 %"044", i64* %"48_0", align 4
  store [2 x i64] %"145", [2 x i64]* %"48_1", align 4
  %"48_046" = load i64, i64* %"48_0", align 4
  %"48_147" = load [2 x i64], [2 x i64]* %"48_1", align 4
  store i64 %"48_046", i64* %"030", align 4
  store [2 x i64] %"48_147", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"031" = load i64, i64* %"030", align 4
  %"132" = load [2 x i64], [2 x i64]* %"1", align 4
  store i64 %"031", i64* %"40_0", align 4
  store [2 x i64] %"132", [2 x i64]* %"40_1", align 4
  %"40_148" = load [2 x i64], [2 x i64]* %"40_1", align 4
  %71 = alloca i64, i32 2, align 8
  %72 = bitcast i64* %71 to [2 x i64]*
  store [2 x i64] %"40_148", [2 x i64]* %72, align 4
  %73 = getelementptr i64, i64* %71, i32 1
  %74 = load i64, i64* %71, align 4
  %75 = bitcast i64* %73 to [1 x i64]*
  %76 = load [1 x i64], [1 x i64]* %75, align 4
  %77 = insertvalue { i64, [1 x i64] } undef, i64 %74, 0
  %78 = insertvalue { i64, [1 x i64] } %77, [1 x i64] %76, 1
  %79 = insertvalue { i32, {}, { i64, [1 x i64] } } { i32 1, {} poison, { i64, [1 x i64] } poison }, { i64, [1 x i64] } %78, 2
  store { i32, {}, { i64, [1 x i64] } } %79, { i32, {}, { i64, [1 x i64] } }* %"50_0", align 4
  %"50_049" = load { i32, {}, { i64, [1 x i64] } }, { i32, {}, { i64, [1 x i64] } }* %"50_0", align 4
  %80 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_049", 0
  switch i32 %80, label %81 [
    i32 1, label %83
  ]

81:                                               ; preds = %cond_exit_40
  %82 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_049", 1
  br label %cond_51_case_0

83:                                               ; preds = %cond_exit_40
  %84 = extractvalue { i32, {}, { i64, [1 x i64] } } %"50_049", 2
  %85 = extractvalue { i64, [1 x i64] } %84, 0
  %86 = extractvalue { i64, [1 x i64] } %84, 1
  store i64 %85, i64* %"057", align 4
  store [1 x i64] %86, [1 x i64]* %"158", align 4
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %81
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, { i32, i8* }* %"56_0", align 8
  %"56_054" = load { i32, i8* }, { i32, i8* }* %"56_0", align 8
  %87 = extractvalue { i32, i8* } %"56_054", 0
  %88 = extractvalue { i32, i8* } %"56_054", 1
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %87, i8* %88)
  call void @abort()
  store i64 0, i64* %"57_0", align 4
  store [1 x i64] zeroinitializer, [1 x i64]* %"57_1", align 4
  %"57_055" = load i64, i64* %"57_0", align 4
  %"57_156" = load [1 x i64], [1 x i64]* %"57_1", align 4
  store i64 %"57_055", i64* %"050", align 4
  store [1 x i64] %"57_156", [1 x i64]* %"151", align 4
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %83
  %"059" = load i64, i64* %"057", align 4
  %"160" = load [1 x i64], [1 x i64]* %"158", align 4
  store i64 %"059", i64* %"59_0", align 4
  store [1 x i64] %"160", [1 x i64]* %"59_1", align 4
  %"59_061" = load i64, i64* %"59_0", align 4
  %"59_162" = load [1 x i64], [1 x i64]* %"59_1", align 4
  store i64 %"59_061", i64* %"050", align 4
  store [1 x i64] %"59_162", [1 x i64]* %"151", align 4
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"052" = load i64, i64* %"050", align 4
  %"153" = load [1 x i64], [1 x i64]* %"151", align 4
  store i64 %"052", i64* %"51_0", align 4
  store [1 x i64] %"153", [1 x i64]* %"51_1", align 4
  %"51_163" = load [1 x i64], [1 x i64]* %"51_1", align 4
  %90 = alloca i64, align 8
  %91 = bitcast i64* %90 to [1 x i64]*
  store [1 x i64] %"51_163", [1 x i64]* %91, align 4
  %92 = getelementptr i64, i64* %90, i32 0
  %93 = load i64, i64* %92, align 4
  %94 = bitcast i64* %90 to [0 x i64]*
  %95 = load [0 x i64], [0 x i64]* %94, align 4
  %96 = insertvalue { i64, [0 x i64] } undef, i64 %93, 0
  %97 = insertvalue { i64, [0 x i64] } %96, [0 x i64] %95, 1
  %98 = insertvalue { i32, {}, { i64, [0 x i64] } } { i32 1, {} poison, { i64, [0 x i64] } poison }, { i64, [0 x i64] } %97, 2
  store { i32, {}, { i64, [0 x i64] } } %98, { i32, {}, { i64, [0 x i64] } }* %"61_0", align 4
  %"61_064" = load { i32, {}, { i64, [0 x i64] } }, { i32, {}, { i64, [0 x i64] } }* %"61_0", align 4
  %99 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_064", 0
  switch i32 %99, label %100 [
    i32 1, label %102
  ]

100:                                              ; preds = %cond_exit_51
  %101 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_064", 1
  br label %cond_62_case_0

102:                                              ; preds = %cond_exit_51
  %103 = extractvalue { i32, {}, { i64, [0 x i64] } } %"61_064", 2
  %104 = extractvalue { i64, [0 x i64] } %103, 0
  %105 = extractvalue { i64, [0 x i64] } %103, 1
  store i64 %104, i64* %"072", align 4
  store [0 x i64] %105, [0 x i64]* %"173", align 4
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %100
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, { i32, i8* }* %"67_0", align 8
  %"67_069" = load { i32, i8* }, { i32, i8* }* %"67_0", align 8
  %106 = extractvalue { i32, i8* } %"67_069", 0
  %107 = extractvalue { i32, i8* } %"67_069", 1
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %106, i8* %107)
  call void @abort()
  store i64 0, i64* %"68_0", align 4
  store [0 x i64] zeroinitializer, [0 x i64]* %"68_1", align 4
  %"68_070" = load i64, i64* %"68_0", align 4
  %"68_171" = load [0 x i64], [0 x i64]* %"68_1", align 4
  store i64 %"68_070", i64* %"065", align 4
  store [0 x i64] %"68_171", [0 x i64]* %"166", align 4
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %102
  %"074" = load i64, i64* %"072", align 4
  %"175" = load [0 x i64], [0 x i64]* %"173", align 4
  store i64 %"074", i64* %"70_0", align 4
  store [0 x i64] %"175", [0 x i64]* %"70_1", align 4
  %"70_076" = load i64, i64* %"70_0", align 4
  %"70_177" = load [0 x i64], [0 x i64]* %"70_1", align 4
  store i64 %"70_076", i64* %"065", align 4
  store [0 x i64] %"70_177", [0 x i64]* %"166", align 4
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"067" = load i64, i64* %"065", align 4
  %"168" = load [0 x i64], [0 x i64]* %"166", align 4
  store i64 %"067", i64* %"62_0", align 4
  store [0 x i64] %"168", [0 x i64]* %"62_1", align 4
  %"62_178" = load [0 x i64], [0 x i64]* %"62_1", align 4
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
