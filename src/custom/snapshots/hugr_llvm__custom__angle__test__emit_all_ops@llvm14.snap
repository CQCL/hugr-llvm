---
source: src/custom/angle.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [14 x i8] c"Invalid angle\00", align 1

define { i32, {}, {} } @_hl.main.1(i64 %0, i64 %1) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %2 = uitofp i64 %0 to double
  %3 = call double @llvm.exp2.f64(double -6.300000e+01)
  %4 = fmul double %2, 0x400921FB54442D18
  %5 = fmul double %4, %3
  %6 = fdiv double %5, 0x401921FB54442D18
  %7 = call double @llvm.floor.f64(double %6)
  %8 = fsub double %6, %7
  %9 = fcmp oeq double %5, 0x7FF0000000000000
  %10 = fcmp oeq double %5, 0xFFF0000000000000
  %11 = fcmp uno double %5, 0.000000e+00
  %12 = or i1 %9, %10
  %13 = or i1 %12, %11
  %14 = xor i1 %13, true
  %15 = select i1 %14, double %8, double 0.000000e+00
  %16 = call double @llvm.exp2.f64(double 6.400000e+01)
  %17 = fmul double %15, %16
  %18 = fadd double %17, 5.000000e-01
  %19 = fptoui double %18 to i64
  %20 = mul i64 %19, %1
  %21 = add i64 %20, %20
  %22 = sub i64 %21, %21
  %23 = sub i64 0, %22
  %24 = icmp eq i64 %23, %23
  %25 = select i1 %24, { i32, {}, {} } { i32 1, {} poison, {} undef }, { i32, {}, {} } { i32 0, {} undef, {} poison }
  %26 = shl i64 1, 64
  %27 = icmp ule i64 64, 53
  %28 = icmp ult i64 %22, %26
  %29 = freeze i1 %28
  %30 = and i1 %27, %29
  %31 = sub i64 64, 64
  %32 = shl i64 %22, %31
  %33 = insertvalue { i64 } undef, i64 %32, 0
  %34 = insertvalue { i32, { { i32, i8* } }, { i64 } } { i32 1, { { i32, i8* } } poison, { i64 } poison }, { i64 } %33, 2
  %35 = select i1 %30, { i32, { { i32, i8* } }, { i64 } } %34, { i32, { { i32, i8* } }, { i64 } } { i32 0, { { i32, i8* } } { { i32, i8* } { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i32 0, i32 0) } }, { i64 } poison }
  ret { i32, {}, {} } %25
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.exp2.f64(double) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
