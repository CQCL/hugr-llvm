---
source: src/custom/angle.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [14 x i8] c"Invalid angle\00", align 1

define { i32, {}, {} } @_hl.main.1(i64 %0, i64 %1) {
alloca_block:
  %"0" = alloca { i32, {}, {} }, align 8
  %"2_0" = alloca i64, align 8
  %"2_1" = alloca i64, align 8
  %"4_0" = alloca double, align 8
  %"5_0" = alloca i64, align 8
  %"6_0" = alloca i64, align 8
  %"8_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"14_0" = alloca i64, align 8
  %"12_0" = alloca i64, align 8
  %"12_1" = alloca i64, align 8
  %"16_0" = alloca i64, align 8
  %"18_0" = alloca { i32, {}, {} }, align 8
  %"13_0" = alloca { i32, { { i32, i8* } }, { i64 } }, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 %0, i64* %"2_0", align 4
  store i64 %1, i64* %"2_1", align 4
  %"2_01" = load i64, i64* %"2_0", align 4
  %2 = uitofp i64 %"2_01" to double
  %3 = call double @llvm.exp2.f64(double 6.400000e+01)
  %4 = fmul double %2, 0x401921FB54442D18
  %5 = fdiv double %4, %3
  store double %5, double* %"4_0", align 8
  %"2_12" = load i64, i64* %"2_1", align 4
  %"4_03" = load double, double* %"4_0", align 8
  %6 = fdiv double %"4_03", 0x401921FB54442D18
  %7 = call double @llvm.floor.f64(double %6)
  %8 = fsub double %6, %7
  %9 = call double @llvm.exp2.f64(double 6.400000e+01)
  %10 = fmul double %8, %9
  %11 = fadd double %10, 5.000000e-01
  %12 = fptoui double %11 to i64
  store i64 %12, i64* %"5_0", align 4
  %"5_04" = load i64, i64* %"5_0", align 4
  %"2_15" = load i64, i64* %"2_1", align 4
  %13 = mul i64 %"5_04", %"2_15"
  store i64 %13, i64* %"6_0", align 4
  %"6_06" = load i64, i64* %"6_0", align 4
  %"6_07" = load i64, i64* %"6_0", align 4
  %14 = add i64 %"6_06", %"6_07"
  store i64 %14, i64* %"8_0", align 4
  %"8_08" = load i64, i64* %"8_0", align 4
  %"8_09" = load i64, i64* %"8_0", align 4
  %15 = sub i64 %"8_08", %"8_09"
  store i64 %15, i64* %"10_0", align 4
  %"10_010" = load i64, i64* %"10_0", align 4
  %16 = sub i64 0, %"10_010"
  store i64 %16, i64* %"14_0", align 4
  %"10_011" = load i64, i64* %"10_0", align 4
  store i64 %"10_011", i64* %"12_0", align 4
  store i64 64, i64* %"12_1", align 4
  %"14_012" = load i64, i64* %"14_0", align 4
  %"12_113" = load i64, i64* %"12_1", align 4
  store i64 %"14_012", i64* %"16_0", align 4
  %"16_014" = load i64, i64* %"16_0", align 4
  %"16_015" = load i64, i64* %"16_0", align 4
  %17 = icmp eq i64 %"16_014", %"16_015"
  %18 = select i1 %17, { i32, {}, {} } { i32 1, {} poison, {} undef }, { i32, {}, {} } { i32 0, {} undef, {} poison }
  store { i32, {}, {} } %18, { i32, {}, {} }* %"18_0", align 4
  %"18_016" = load { i32, {}, {} }, { i32, {}, {} }* %"18_0", align 4
  store { i32, {}, {} } %"18_016", { i32, {}, {} }* %"0", align 4
  %"12_017" = load i64, i64* %"12_0", align 4
  %"12_118" = load i64, i64* %"12_1", align 4
  %19 = shl i64 1, %"12_118"
  %20 = icmp ule i64 %"12_118", 53
  %21 = icmp ule i64 %"12_118", 64
  %22 = and i1 %20, %21
  %23 = icmp ult i64 %"12_017", %19
  %24 = freeze i1 %23
  %25 = and i1 %22, %24
  %26 = sub i64 64, %"12_118"
  %27 = shl i64 %"12_017", %26
  %28 = insertvalue { i64 } undef, i64 %27, 0
  %29 = insertvalue { i32, { { i32, i8* } }, { i64 } } { i32 1, { { i32, i8* } } poison, { i64 } poison }, { i64 } %28, 2
  %30 = select i1 %25, { i32, { { i32, i8* } }, { i64 } } %29, { i32, { { i32, i8* } }, { i64 } } { i32 0, { { i32, i8* } } { { i32, i8* } { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i32 0, i32 0) } }, { i64 } poison }
  store { i32, { { i32, i8* } }, { i64 } } %30, { i32, { { i32, i8* } }, { i64 } }* %"13_0", align 8
  %"019" = load { i32, {}, {} }, { i32, {}, {} }* %"0", align 4
  ret { i32, {}, {} } %"019"
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.exp2.f64(double) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
